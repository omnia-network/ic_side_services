/* WebSocket types */
type ClientPrincipal = principal;
type GatewayPrincipal = principal;
type ClientKey = record {
    client_principal : ClientPrincipal;
    client_nonce : nat64;
};

type WebsocketMessage = record {
    client_key : ClientKey;
    sequence_num : nat64;
    timestamp : nat64;
    is_service_message : bool;
    content : blob;
};

type CanisterOutputMessage = record {
    client_key : ClientKey;
    key : text;
    content : blob;
};

type CanisterOutputCertifiedMessages = record {
    messages : vec CanisterOutputMessage;
    cert : blob;
    tree : blob;
    is_end_of_queue : bool;
};

type CanisterWsOpenArguments = record {
    client_nonce : nat64;
    gateway_principal : GatewayPrincipal;
};

type CanisterWsOpenResult = variant {
    Ok : null;
    Err : text;
};

type CanisterWsCloseArguments = record {
    client_key : ClientKey;
};

type CanisterWsCloseResult = variant {
    Ok : null;
    Err : text;
};

type CanisterWsMessageArguments = record {
    msg : WebsocketMessage;
};

type CanisterWsMessageResult = variant {
    Ok : null;
    Err : text;
};

type CanisterWsGetMessagesArguments = record {
    nonce : nat64;
};

type CanisterWsGetMessagesResult = variant {
    Ok : CanisterOutputCertifiedMessages;
    Err : text;
};
/* End WebSocket types */

/* Application types */
type HttpRequestId = nat32;

type HttpMethod = variant {
    GET;
    POST;
    PUT;
    HEAD;
    DELETE;
};

type HttpHeader = record {
    name : text;
    value : text;
};

type HttpRequest = record {
    url : text;
    method : HttpMethod;
    headers : vec HttpHeader;
    body : opt blob;
};

type HttpResponse = record {
    status : nat;
    headers : vec HttpHeader;
    body : blob;
};

type HttpOverWsMessage = variant {
    HttpRequest : record { HttpRequestId; HttpRequest };
    HttpResponse : record { HttpRequestId; HttpResponse };
    Error : text;
};

type HttpRequestState = record {
    request : HttpRequest;
    response : opt HttpResponse;
};

type ConnectedClients = record {
    idle_clients : vec principal;
    busy_clients : vec record { principal; vec HttpRequestId };
};
/* End Application types */

service : {
    "ws_open" : (CanisterWsOpenArguments) -> (CanisterWsOpenResult);
    "ws_close" : (CanisterWsCloseArguments) -> (CanisterWsCloseResult);
    "ws_message" : (CanisterWsMessageArguments, opt HttpOverWsMessage) -> (CanisterWsMessageResult);
    "ws_get_messages" : (CanisterWsGetMessagesArguments) -> (CanisterWsGetMessagesResult) query;

    "execute_http_request" : (text, HttpMethod, vec HttpHeader, opt blob) -> (HttpRequestId);
    "get_http_request_state" : (HttpRequestId) -> (opt HttpRequestState) query;
    "get_connected_clients" : () -> (ConnectedClients) query;
};
