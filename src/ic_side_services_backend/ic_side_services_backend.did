/* Start HTTP Proxy types */
type HttpRequestId = nat32;

type HttpHeader = record {
    name : text;
    value : text;
};

type HttpResponse = record {
    status : nat;
    headers : vec HttpHeader;
    body : blob;
};

type HttpFailureReason = variant {
    RequestTimeout;
    ProxyError : text;
};

type HttpResult = variant {
    Success : HttpResponse;
    Failure : HttpFailureReason;
};

type InvalidRequest = variant {
    InvalidUrl : text;
    TooManyHeaders;
    InvalidTimeout;
};

type HttpFailureReason = variant {
    RequestTimeout;
    ProxyError : text;
};

type HttpOverWsError = variant {
    NotHttpOverWsType : text;
    InvalidHttpMessage;
    ProxyNotFound;
    RequestIdNotFound;
    NotYetReceived;
    NoProxiesConnected;
    ConnectionNotAssignedToProxy;
    RequestFailed : HttpFailureReason;
};

type ProxyCanisterError = variant {
    InvalidRequest : InvalidRequest;
    HttpOverWs : HttpOverWsError;
};

type HttpRequestEndpointResult = variant {
    Ok : HttpRequestId;
    Err : ProxyCanisterError;
};

/* End HTTP Proxy types */

type FluxNetwork = variant {
    local;
    testnet;
    mainnet;
};

service : (FluxNetwork) -> {
    "login_phrase_callback" : (HttpRequestId, HttpResult) -> ();
    "verify_login_callback" : (HttpRequestId, HttpResult) -> ();
    "logout_callback" : (HttpRequestId, HttpResult) -> ();
    "balance_callback" : (HttpRequestId, HttpResult) -> ();
    "calculate_price_callback" : (HttpRequestId, HttpResult) -> ();
    "app_register_callback" : (HttpRequestId, HttpResult) -> ();
    "deployment_information_callback" : (HttpRequestId, HttpResult) -> ();

    "set_canister_public_key" : (opt text) -> ();
    "get_addresses" : () -> (text, text) query;
    "sign_with_ecdsa" : (text, opt text) -> (text);

    "flux_login" : () -> (HttpRequestEndpointResult);
    "flux_logout" : () -> (HttpRequestEndpointResult);
    "flux_fetch_balance" : () -> (HttpRequestEndpointResult);
    "flux_get_balance" : () -> (opt float32) query;
    "flux_is_logged_in" : () -> (bool) query;
    "flux_calculate_app_price" : () -> (HttpRequestEndpointResult);
    "flux_register_app" : () -> (HttpRequestEndpointResult);
    "flux_get_deployment_information" : () -> (HttpRequestEndpointResult);

    "get_logs" : () -> (vec record { text; text }) query;
};
