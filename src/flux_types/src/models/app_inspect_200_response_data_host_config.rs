/*
 * Flux
 *
 * This is an API documentation of calls available to be made to any Flux. <br> GET Calls are available as both query and in order as path. <br> Flux is completely open source and we encourage everyone to feel free and contribute :) <br> Further questions or support join and ask in our [discord](https://discord.io/runonflux)  # Introduction Flux possesses a 5 tier hiearchy level API. * **Public** API level - Available without any permission, does not require signing. * **User** API level - User level permission, requires signing. * **FluxTeam** API level - FluxTeam level permission (an appointed Flux Team member has access to those API calls), requires signing. * **Admin** API level - Admin level permission, requires signing. Flux owner. * **AdminAndFluxTeam** API level permission (Admin and Flux Team has access to these calls), requires signing. * **AppOwner** API level - AppOwner level permission, requires signing. App Owner. * **AppOwnerAbove** API level - AppOwnerAbove level permission (App Owner, FluxTeam, and Admin has access to these calls), requires signing.  Most calls are available via GET request with some that may require large amount of data via POST request. Websocket is currently used only for simplifying login operations and for internal Flux communication. # Getting Started with the API * **1. Install Zelcore Wallet:** The Zelcore wallet is required for signing messages. Please install this if not already installed. * **2. Create Zelcore Account:** A Zelcore wallet account is required for signing messages. Please register an account if you don't already have one. * **3. Obtain API Authentication Credentials:** Follow the Authentication section of this API documentation in order to set up your credentials for using the rest of the API. You will need to use your Zelcore wallet for parts of this process. * **4. Set Up Authentication Credentials in Header:** Set up your zelidauth credentials in your header. If you are using variables, the signature value may need to be URLencoded.
 *
 * The version of the OpenAPI document: 4.9.1
 * Contact: tadeas@runonflux.io
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AppInspect200ResponseDataHostConfig {
    #[serde(rename = "Binds", skip_serializing_if = "Option::is_none")]
    pub binds: Option<Vec<String>>,
    /// File id
    #[serde(rename = "ContainerIDFile", skip_serializing_if = "Option::is_none")]
    pub container_id_file: Option<String>,
    #[serde(rename = "LogConfig", skip_serializing_if = "Option::is_none")]
    pub log_config: Option<Box<crate::models::AppInspect200ResponseDataHostConfigLogConfig>>,
    /// Network mode
    #[serde(rename = "NetworkMode", skip_serializing_if = "Option::is_none")]
    pub network_mode: Option<String>,
    #[serde(rename = "PortBindings", skip_serializing_if = "Option::is_none")]
    pub port_bindings: Option<Box<crate::models::AppInspect200ResponseDataHostConfigPortBindings>>,
    #[serde(rename = "RestartPolicy", skip_serializing_if = "Option::is_none")]
    pub restart_policy: Option<Box<crate::models::AppInspect200ResponseDataHostConfigRestartPolicy>>,
    /// Is autoremove feature on
    #[serde(rename = "AutoRemove", skip_serializing_if = "Option::is_none")]
    pub auto_remove: Option<bool>,
    /// Optional volume driver for the container
    #[serde(rename = "VolumeDriver", skip_serializing_if = "Option::is_none")]
    pub volume_driver: Option<String>,
    /// Mount volumes from the specified container
    #[serde(rename = "VolumesFrom", skip_serializing_if = "Option::is_none")]
    pub volumes_from: Option<String>,
    /// Add Linux capabilities
    #[serde(rename = "CapAdd", skip_serializing_if = "Option::is_none")]
    pub cap_add: Option<String>,
    /// Drop Linux capabilities
    #[serde(rename = "CapDrop", skip_serializing_if = "Option::is_none")]
    pub cap_drop: Option<String>,
    /// OS capabilities
    #[serde(rename = "Capabilities", skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<String>,
    /// Set custom DNS servers
    #[serde(rename = "Dns", skip_serializing_if = "Option::is_none")]
    pub dns: Option<String>,
    /// Set DNS options
    #[serde(rename = "DnsOptions", skip_serializing_if = "Option::is_none")]
    pub dns_options: Option<String>,
    /// Set custom DNS search domains
    #[serde(rename = "DnsSearch", skip_serializing_if = "Option::is_none")]
    pub dns_search: Option<String>,
    /// Extra hosts
    #[serde(rename = "ExtraHosts", skip_serializing_if = "Option::is_none")]
    pub extra_hosts: Option<String>,
    /// Add additional groups to join
    #[serde(rename = "GroupAdd", skip_serializing_if = "Option::is_none")]
    pub group_add: Option<String>,
    /// IPC mode to use
    #[serde(rename = "IpcMode", skip_serializing_if = "Option::is_none")]
    pub ipc_mode: Option<String>,
    /// Cgroup for the container
    #[serde(rename = "Cgroup", skip_serializing_if = "Option::is_none")]
    pub cgroup: Option<String>,
    /// Links to another container
    #[serde(rename = "Links", skip_serializing_if = "Option::is_none")]
    pub links: Option<String>,
    /// Tune host's OOM preferences (-1000 to 1000)
    #[serde(rename = "OomScoreAdj", skip_serializing_if = "Option::is_none")]
    pub oom_score_adj: Option<i32>,
    /// Pid to use
    #[serde(rename = "PidMode", skip_serializing_if = "Option::is_none")]
    pub pid_mode: Option<String>,
    /// Extended privileges to this container
    #[serde(rename = "Privileged", skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    /// Publish all exposed ports to random ports
    #[serde(rename = "PublishAllPorts", skip_serializing_if = "Option::is_none")]
    pub publish_all_ports: Option<bool>,
    /// Mount the containerâ€™s root filesystem as read only
    #[serde(rename = "ReadonlyRootfs", skip_serializing_if = "Option::is_none")]
    pub readonly_rootfs: Option<bool>,
    /// Security Options
    #[serde(rename = "SecurityOpt", skip_serializing_if = "Option::is_none")]
    pub security_opt: Option<String>,
    /// UTS namespace to use
    #[serde(rename = "UTSMode", skip_serializing_if = "Option::is_none")]
    pub uts_mode: Option<String>,
    /// Sets the usernamespace mode for the container when usernamespace remapping option is enabled
    #[serde(rename = "UsernsMode", skip_serializing_if = "Option::is_none")]
    pub userns_mode: Option<String>,
    /// Size of /dev/shm
    #[serde(rename = "ShmSize", skip_serializing_if = "Option::is_none")]
    pub shm_size: Option<i32>,
    /// Runtime to use for this container
    #[serde(rename = "Runtime", skip_serializing_if = "Option::is_none")]
    pub runtime: Option<String>,
    #[serde(rename = "ConsoleSize", skip_serializing_if = "Option::is_none")]
    pub console_size: Option<Vec<String>>,
    /// Isolation technology of the container. (Windows only)
    #[serde(rename = "Isolation", skip_serializing_if = "Option::is_none")]
    pub isolation: Option<String>,
    /// Value containing the container's CPU Shares
    #[serde(rename = "CpuShares", skip_serializing_if = "Option::is_none")]
    pub cpu_shares: Option<i32>,
    /// Memory limit in bytes
    #[serde(rename = "Memory", skip_serializing_if = "Option::is_none")]
    pub memory: Option<i32>,
    /// CPU quota in units of 10<sup>-9</sup> CPUs
    #[serde(rename = "NanoCpus", skip_serializing_if = "Option::is_none")]
    pub nano_cpus: Option<i32>,
    /// Path to cgroups under which the container's cgroup is created
    #[serde(rename = "CgroupParent", skip_serializing_if = "Option::is_none")]
    pub cgroup_parent: Option<String>,
    /// Block IO weight (relative weight)
    #[serde(rename = "BlkioWeight", skip_serializing_if = "Option::is_none")]
    pub blkio_weight: Option<f32>,
    /// Block IO weight (relative device weight)
    #[serde(rename = "BlkioWeightDevice", skip_serializing_if = "Option::is_none")]
    pub blkio_weight_device: Option<String>,
    /// Limit read rate (bytes per second)
    #[serde(rename = "BlkioDeviceReadBps", skip_serializing_if = "Option::is_none")]
    pub blkio_device_read_bps: Option<String>,
    /// Limit write rate (bytes per second)
    #[serde(rename = "BlkioDeviceWriteBps", skip_serializing_if = "Option::is_none")]
    pub blkio_device_write_bps: Option<String>,
    /// Limit read rate (IO per second)
    #[serde(rename = "BlkioDeviceReadIOps", skip_serializing_if = "Option::is_none")]
    pub blkio_device_read_i_ops: Option<String>,
    /// Limit write rate (IO per second)
    #[serde(rename = "BlkioDeviceWriteIOps", skip_serializing_if = "Option::is_none")]
    pub blkio_device_write_i_ops: Option<String>,
    /// The length of a CPU period in microseconds
    #[serde(rename = "CpuPeriod", skip_serializing_if = "Option::is_none")]
    pub cpu_period: Option<i32>,
    /// Microseconds of CPU time that the container can get in a CPU period
    #[serde(rename = "CpuQuota", skip_serializing_if = "Option::is_none")]
    pub cpu_quota: Option<i32>,
    /// CPU real-time period limit in microseconds
    #[serde(rename = "CpuRealtimePeriod", skip_serializing_if = "Option::is_none")]
    pub cpu_realtime_period: Option<i32>,
    /// CPU real-time runtime limit in microseconds
    #[serde(rename = "CpuRealtimeRuntime", skip_serializing_if = "Option::is_none")]
    pub cpu_realtime_runtime: Option<i32>,
    /// CPUs in which to allow execution
    #[serde(rename = "CpusetCpus", skip_serializing_if = "Option::is_none")]
    pub cpuset_cpus: Option<String>,
    /// Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems
    #[serde(rename = "CpusetMems", skip_serializing_if = "Option::is_none")]
    pub cpuset_mems: Option<String>,
    /// A list of devices to add to the container
    #[serde(rename = "Devices", skip_serializing_if = "Option::is_none")]
    pub devices: Option<String>,
    /// A list of cgroup rules to apply to the container
    #[serde(rename = "DeviceCgroupRules", skip_serializing_if = "Option::is_none")]
    pub device_cgroup_rules: Option<String>,
    /// A list of requests for devices to be sent to device drivers
    #[serde(rename = "DeviceRequests", skip_serializing_if = "Option::is_none")]
    pub device_requests: Option<String>,
    /// Kernel memory limit
    #[serde(rename = "KernelMemory", skip_serializing_if = "Option::is_none")]
    pub kernel_memory: Option<i32>,
    /// Hard limit for kernel TCP buffer memory (in bytes)
    #[serde(rename = "KernelMemoryTCP", skip_serializing_if = "Option::is_none")]
    pub kernel_memory_tcp: Option<i32>,
    /// Memory soft limit in bytes
    #[serde(rename = "MemoryReservation", skip_serializing_if = "Option::is_none")]
    pub memory_reservation: Option<i32>,
    /// Swap limit equal to memory plus swap: -1 to enable unlimited swap
    #[serde(rename = "MemorySwap", skip_serializing_if = "Option::is_none")]
    pub memory_swap: Option<i32>,
    /// Container's memory swappiness behavior
    #[serde(rename = "MemorySwappiness", skip_serializing_if = "Option::is_none")]
    pub memory_swappiness: Option<String>,
    /// Whether to disable OOM Killer for the container or not
    #[serde(rename = "OomKillDisable", skip_serializing_if = "Option::is_none")]
    pub oom_kill_disable: Option<bool>,
    /// Container's pids limit. Set -1 for unlimited.
    #[serde(rename = "PidsLimit", skip_serializing_if = "Option::is_none")]
    pub pids_limit: Option<i32>,
    #[serde(rename = "Ulimits", skip_serializing_if = "Option::is_none")]
    pub ulimits: Option<Vec<crate::models::AppInspect200ResponseDataHostConfigUlimitsInner>>,
    /// The number of usable CPUs (Windows only)
    #[serde(rename = "CpuCount", skip_serializing_if = "Option::is_none")]
    pub cpu_count: Option<i32>,
    /// The usable percentage of the available CPUs (Windows only)
    #[serde(rename = "CpuPercent", skip_serializing_if = "Option::is_none")]
    pub cpu_percent: Option<i32>,
    /// Maximum IOps for the container system drive (Windows only)
    #[serde(rename = "IOMaximumIOps", skip_serializing_if = "Option::is_none")]
    pub io_maximum_i_ops: Option<i32>,
    /// Maximum IO in bytes per second for the container system drive
    #[serde(rename = "IOMaximumBandwidth", skip_serializing_if = "Option::is_none")]
    pub io_maximum_bandwidth: Option<i32>,
    #[serde(rename = "MaskedPaths", skip_serializing_if = "Option::is_none")]
    pub masked_paths: Option<Vec<String>>,
    #[serde(rename = "ReadonlyPaths", skip_serializing_if = "Option::is_none")]
    pub readonly_paths: Option<Vec<String>>,
}

impl AppInspect200ResponseDataHostConfig {
    pub fn new() -> AppInspect200ResponseDataHostConfig {
        AppInspect200ResponseDataHostConfig {
            binds: None,
            container_id_file: None,
            log_config: None,
            network_mode: None,
            port_bindings: None,
            restart_policy: None,
            auto_remove: None,
            volume_driver: None,
            volumes_from: None,
            cap_add: None,
            cap_drop: None,
            capabilities: None,
            dns: None,
            dns_options: None,
            dns_search: None,
            extra_hosts: None,
            group_add: None,
            ipc_mode: None,
            cgroup: None,
            links: None,
            oom_score_adj: None,
            pid_mode: None,
            privileged: None,
            publish_all_ports: None,
            readonly_rootfs: None,
            security_opt: None,
            uts_mode: None,
            userns_mode: None,
            shm_size: None,
            runtime: None,
            console_size: None,
            isolation: None,
            cpu_shares: None,
            memory: None,
            nano_cpus: None,
            cgroup_parent: None,
            blkio_weight: None,
            blkio_weight_device: None,
            blkio_device_read_bps: None,
            blkio_device_write_bps: None,
            blkio_device_read_i_ops: None,
            blkio_device_write_i_ops: None,
            cpu_period: None,
            cpu_quota: None,
            cpu_realtime_period: None,
            cpu_realtime_runtime: None,
            cpuset_cpus: None,
            cpuset_mems: None,
            devices: None,
            device_cgroup_rules: None,
            device_requests: None,
            kernel_memory: None,
            kernel_memory_tcp: None,
            memory_reservation: None,
            memory_swap: None,
            memory_swappiness: None,
            oom_kill_disable: None,
            pids_limit: None,
            ulimits: None,
            cpu_count: None,
            cpu_percent: None,
            io_maximum_i_ops: None,
            io_maximum_bandwidth: None,
            masked_paths: None,
            readonly_paths: None,
        }
    }
}


