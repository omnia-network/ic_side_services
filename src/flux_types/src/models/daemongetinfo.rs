/*
 * Flux
 *
 * This is an API documentation of calls available to be made to any Flux. <br> GET Calls are available as both query and in order as path. <br> Flux is completely open source and we encourage everyone to feel free and contribute :) <br> Further questions or support join and ask in our [discord](https://discord.io/runonflux)  # Introduction Flux possesses a 5 tier hiearchy level API. * **Public** API level - Available without any permission, does not require signing. * **User** API level - User level permission, requires signing. * **FluxTeam** API level - FluxTeam level permission (an appointed Flux Team member has access to those API calls), requires signing. * **Admin** API level - Admin level permission, requires signing. Flux owner. * **AdminAndFluxTeam** API level permission (Admin and Flux Team has access to these calls), requires signing. * **AppOwner** API level - AppOwner level permission, requires signing. App Owner. * **AppOwnerAbove** API level - AppOwnerAbove level permission (App Owner, FluxTeam, and Admin has access to these calls), requires signing.  Most calls are available via GET request with some that may require large amount of data via POST request. Websocket is currently used only for simplifying login operations and for internal Flux communication. # Getting Started with the API * **1. Install Zelcore Wallet:** The Zelcore wallet is required for signing messages. Please install this if not already installed. * **2. Create Zelcore Account:** A Zelcore wallet account is required for signing messages. Please register an account if you don't already have one. * **3. Obtain API Authentication Credentials:** Follow the Authentication section of this API documentation in order to set up your credentials for using the rest of the API. You will need to use your Zelcore wallet for parts of this process. * **4. Set Up Authentication Credentials in Header:** Set up your zelidauth credentials in your header. If you are using variables, the signature value may need to be URLencoded.
 *
 * The version of the OpenAPI document: 4.9.1
 * Contact: tadeas@runonflux.io
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Daemongetinfo {
    /// The server version
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
    /// The protocol version
    #[serde(rename = "protocolversion", skip_serializing_if = "Option::is_none")]
    pub protocolversion: Option<i32>,
    /// The wallet version
    #[serde(rename = "walletversion", skip_serializing_if = "Option::is_none")]
    pub walletversion: Option<i32>,
    /// The total Flux balance of the wallet
    #[serde(rename = "balance", skip_serializing_if = "Option::is_none")]
    pub balance: Option<f32>,
    /// The current number of blocks processed in the server
    #[serde(rename = "blocks", skip_serializing_if = "Option::is_none")]
    pub blocks: Option<i32>,
    /// The time offset
    #[serde(rename = "timeoffset", skip_serializing_if = "Option::is_none")]
    pub timeoffset: Option<i32>,
    /// The number of connections
    #[serde(rename = "connections", skip_serializing_if = "Option::is_none")]
    pub connections: Option<i32>,
    /// The proxy used by the server
    #[serde(rename = "proxy", skip_serializing_if = "Option::is_none")]
    pub proxy: Option<String>,
    /// The current difficulty
    #[serde(rename = "difficulty", skip_serializing_if = "Option::is_none")]
    pub difficulty: Option<f32>,
    /// If the server is using testnet or not
    #[serde(rename = "testnet", skip_serializing_if = "Option::is_none")]
    pub testnet: Option<bool>,
    /// The timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool
    #[serde(rename = "keypoololdest", skip_serializing_if = "Option::is_none")]
    pub keypoololdest: Option<i32>,
    /// How many new keys are pre-generated
    #[serde(rename = "keypoolsize", skip_serializing_if = "Option::is_none")]
    pub keypoolsize: Option<i32>,
    /// The transaction fee set at FLUX/kB
    #[serde(rename = "paytxfee", skip_serializing_if = "Option::is_none")]
    pub paytxfee: Option<f32>,
    /// Minimum relay fee for non-free transactions in FLUX/kB
    #[serde(rename = "relayfee", skip_serializing_if = "Option::is_none")]
    pub relayfee: Option<f32>,
    /// Any error messages
    #[serde(rename = "errors", skip_serializing_if = "Option::is_none")]
    pub errors: Option<String>,
}

impl Daemongetinfo {
    pub fn new() -> Daemongetinfo {
        Daemongetinfo {
            version: None,
            protocolversion: None,
            walletversion: None,
            balance: None,
            blocks: None,
            timeoffset: None,
            connections: None,
            proxy: None,
            difficulty: None,
            testnet: None,
            keypoololdest: None,
            keypoolsize: None,
            paytxfee: None,
            relayfee: None,
            errors: None,
        }
    }
}


